<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Unsafe Extension Gallery | 0znzw Tests</title>
    <meta name="theme-color" content="#ff4c4c">
    <meta name="description" content="A place to find extensions that are unable to make it into the extension gallery.">
    <style>
      :root {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        color-scheme: light dark;
      }
      @media (prefers-color-scheme: dark) {
        :root {
          color: #eee;
          background: #111;
        }
        a {
          color: #56b2ff;
        }
        a:visited {
          color: #f192ff;
        }
        a:active {
          color: red;
        }
        .invert-dark {
          filter: invert(100%);
        }
      }

      h1 {
        margin: 16px 0;
      }
      h2, h3, p {
        margin: 8px 0;
      }

      .section {
        max-width: 928px;
        margin: 24px auto;
      }

      .header h1 {
        font-size: 2.5em;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: normal;
        text-align: center;
      }
      .header svg {
        width: 56px;
        height: 56px;
        flex-shrink: 0;
        margin: 0 8px 0 0;
      }
      @media (max-width: 750px) {
        .header h1 {
          flex-direction: column;
        }
        .header svg {
          margin: 0 0 8px 0;
        }
      }

      .infobox, .development-tools {
        padding: 8px;
        margin: 8px 0;
        border-radius: 8px;
        background: rgba(0, 195, 255, 0.245);
        border: 1px solid rgba(0, 187, 255, 0.604);
      }
      .infobox-warning {
        background-color: rgba(255, 0, 0, 0.245);
        border-color: rgba(255, 0, 0, 0.446);
      }
      .infobox-title {
        font-weight: bold;
        margin-bottom: 4px;
      }

      .development-tools {
        background-color: rgba(200, 0, 255, 0.245);
        border-color: rgba(234, 0, 255, 0.604);
      }
      .development-tools h2 {
        font-size: 1em;
      }

      .extensions {
        display: -ms-grid;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        margin: 16px -4px;
      }
      @media (max-width: 944px) {
        .extensions {
          grid-template-columns: 1fr 1fr;
        }
      }
      @media (max-width: 650px) {
        .extensions {
          grid-template-columns: 1fr;
        }
      }

      .extension {
        border: 2px solid #ccc;
        border-radius: 8px;
        margin: 4px;
        overflow: hidden;
        padding: 8px;
      }
      @media (prefers-color-scheme: dark) {
        .extension {
          border-color: #333;
        }
      }
      .extension h3 {
        font-size: 1.5em;
      }
      .extension-banner {
        position: relative;
        margin: -8px -8px 0 -8px;
      }
      .extension-image {
        display: block;
        width: 100%;
        /* TODO: see if there's another way to do this that works in older browsers too */
        aspect-ratio: 2 / 1;
      }

      .extension-buttons {
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity .15s;
        background: rgba(0, 0, 0, 0.5);
        pointer-events: none;
      }
      .extension:hover .extension-buttons, .extension:focus-within .extension-buttons {
        opacity: 1;
      }
      .extension:hover .extension-buttons {
        backdrop-filter: blur(0.6px);
      }
      .extension-buttons > * {
        padding: 8px;
        background-color: #4c97ff;
        border-radius: 8px;
        border: none;
        font: inherit;
        cursor: pointer;
        color: white;
        text-decoration: none;
        pointer-events: auto;
        transition: filter 0.15s;
        filter: drop-shadow(0px 1px 3px #00000075);
      }
      .extension-buttons > *:hover {
        filter: drop-shadow(0px 1px 7px black);
        z-index: 1;
      }
      .extension-buttons *:active {
        filter: brightness(0.85) drop-shadow(0px 1px 2px #00000075);
      }
      .extension-buttons *:disabled {
        opacity: 0.5;
      }
      .extension-buttons .copy {
        margin: 0 8px 0 0;
      }
      .extension-buttons .open {
        background-color: #ff4c4c;
        color: white;
      }
      .extension-buttons :disabled {
        opacity: 0.5;
      }

      footer {
        opacity: 0.8;
        width: 100%;
        text-align: center;
        margin-bottom: 16px;
      }
      footer p {
        margin: 0 0 8px 0;
      }
    </style>
  </head>

  <body>
    <div class="section header">
      <h1>
        <div>0znzw Tests</div>
      </h1>

      <div class="infobox infobox-warning">
        <div class="infobox-title">These extensions are not compatible with Scratch.</div>
        DO NOT USE THESE, THEY ARE TESTS, ARE VERY BUGGY, AND COULD CORRUPT YOUR PROJECT.
      </div>

    <%
    const getLinkToRun = (extensionPath) => `https://turbowarp.org/editor?extension=${host}${extensionPath}`;
    %>

    <% if (mode === "development") { %>
      <div class="section">
        <div class="development-tools">
          <h2>Development Server Tools</h2>
          <p>
            Most recently modified extensions:
            <% for (const extension of mostRecentExtensions) { %>
              <a href="<%= getLinkToRun(extension) %>"><%= extension %></a>
            <% } %>
          </p>
        </div>
      </div>
    <% } %>

    <script>
      window.TWUextensionPage = true;
      document.addEventListener('click', function (e) {
        var toCopy = e.target.getAttribute('data-copy');
        if (toCopy) {
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(toCopy);
          } else {
            var input = document.createElement('input');
            input.value = toCopy;
            input.style.top = '0';
            input.style.left = '0';
            input.style.position = 'fixed';
            document.body.appendChild(input);
            input.focus();
            input.select();
            try {
              document.execCommand('copy');
            } catch (e) {
              console.error(e);
            }
            document.body.removeChild(input);
            e.target.focus();
          }
        }
      });
    </script>

    <% if (mode === 'desktop') { %>
    <script>
      // Mock API for testing outside of desktop app
      if (typeof TWD === 'undefined') {
        console.log('MOCK: Desktop API object does not exist -- using a mock instead');
        var TWD = {
          extensions: {
            loadExtension: (url) => new Promise((resolve, reject) => {
              console.log(`MOCK: Loading ${url}...`);
              setTimeout(() => {
                console.log(`MOCK: Loaded ${url}`);
                if (Math.random() > 0.5) {
                  resolve();
                } else {
                  reject(new Error('Demo error'));
                }
              }, Math.random() * 1000 + 50);
            }),
          },
        };
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      document.addEventListener('click', (e) => {
        var toLoad = e.target.getAttribute('data-load');
        if (toLoad) {
          e.target.classList.add('loading');
          e.target.disabled = true;
          Promise.all([
            TWD.extensions.loadExtension(toLoad),
            sleep(500),
          ])
            .then(() => {
              e.target.disabled = false;
              e.target.classList.remove('loading');
            })
            .catch((error) => {
              alert(error);
              e.target.disabled = false;
              e.target.classList.remove('loading');
            });
        }
      });
    </script>
    <% } %>

    <%
    const banner = (extensionFile, options = {}) => {
      if (extensionFile.endsWith('.js')) {
        return `Do not add .js when calling banner(): ${extensionFile}`;
      }
      const imageSource = extensionImages[extensionFile] ? `/0znzw/tests/images/${extensionImages[extensionFile]}` : '/images/unknown.svg';
      const imageClasses = ["extension-image"];
      if (options.invertDark) imageClasses.push("invert-dark");
      return `
      <div class="extension-banner">
        <img loading="lazy" src="${imageSource}" class="${imageClasses.join(' ')}" style="${options.style || ''}">
        <div class="extension-buttons">
          <button class="copy" data-copy="${host}${extensionFile}.js">Copy URL</button>
          ${mode === "desktop" ? (`
            <button style="display:none" class="open" data-load="${host}${extensionFile}.js">Add Extension</button>
          `) : (`
            <a style="display:none" href="${getLinkToRun(`${extensionFile}.js`)}" class="open">Open Extension</a>
          `)}
        </div>
      </div>`
    };

    const img = (extensionFile) => {
      if (extensionImages[extensionFile]) return `../images/${extensionImages[extensionFile]}`;
      return 'images/unknown.svg';
    };
    %>
      </div>

    <div class="section extensions-outer">
      <div class="extensions">
        
        <div class="extension">
          <%- banner('0znzw/tests/buttonInBlock') %>
          <h3>Button In Block</h3>
          <p>Allows you to put buttons in blocks.<br><a href="/extended_description/0znzw/tests/buttoninblock.html">Extended description</a>.</p>
        </div>

        <div class="extension">
          <%- banner('0znzw/tests/addonBlockCreator') %>
          <h3>AddonBlock Creator</h3>
          <p>Allows you to register custom addon blocks!<br><a href="https://scratch.mit.edu/users/0znzw">0znzw</a>.<br><a href="/extended_description/0znzw/tests/addonBlockCreator.html">Extended description</a>.</p>
        </div>

      </div>
    </div>

    <footer class="section">
      <p>TurboWarp is not affiliated with Scratch, the Scratch Team, or the Scratch Foundation.</p>
      <div class="links">
        <a href="https://docs.turbowarp.org/development/custom-extensions">Developer Documentation</a>
      </div>
    </footer>
  </body>
</html>